# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from django_test.proto import ml_instance_pb2 as django__test_dot_proto_dot_ml__instance__pb2


class MLInstanceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.setup = channel.unary_unary(
                '/ml_instance.MLInstance/setup',
                request_serializer=django__test_dot_proto_dot_ml__instance__pb2.MLInstanceSetup.SerializeToString,
                response_deserializer=django__test_dot_proto_dot_ml__instance__pb2.MLInstanceResponse.FromString,
                )
        self.import_data = channel.unary_unary(
                '/ml_instance.MLInstance/import_data',
                request_serializer=django__test_dot_proto_dot_ml__instance__pb2.MLImport.SerializeToString,
                response_deserializer=django__test_dot_proto_dot_ml__instance__pb2.MLImportResponse.FromString,
                )
        self.predict = channel.unary_unary(
                '/ml_instance.MLInstance/predict',
                request_serializer=django__test_dot_proto_dot_ml__instance__pb2.MLInstanceAction.SerializeToString,
                response_deserializer=django__test_dot_proto_dot_ml__instance__pb2.MLInstanceResponse.FromString,
                )
        self.export = channel.unary_unary(
                '/ml_instance.MLInstance/export',
                request_serializer=django__test_dot_proto_dot_ml__instance__pb2.MLInstanceAction.SerializeToString,
                response_deserializer=django__test_dot_proto_dot_ml__instance__pb2.MLInstanceResponse.FromString,
                )
        self.create_dataset = channel.unary_unary(
                '/ml_instance.MLInstance/create_dataset',
                request_serializer=django__test_dot_proto_dot_ml__instance__pb2.MLInstanceAction.SerializeToString,
                response_deserializer=django__test_dot_proto_dot_ml__instance__pb2.MLInstanceResponse.FromString,
                )
        self.logs = channel.unary_unary(
                '/ml_instance.MLInstance/logs',
                request_serializer=django__test_dot_proto_dot_ml__instance__pb2.MLInstanceAction.SerializeToString,
                response_deserializer=django__test_dot_proto_dot_ml__instance__pb2.MLInstanceResponse.FromString,
                )
        self.download_checkpoint = channel.unary_unary(
                '/ml_instance.MLInstance/download_checkpoint',
                request_serializer=django__test_dot_proto_dot_ml__instance__pb2.MLInstanceAction.SerializeToString,
                response_deserializer=django__test_dot_proto_dot_ml__instance__pb2.MLInstanceResponse.FromString,
                )


class MLInstanceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def setup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def import_data(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def predict(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def export(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def create_dataset(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def logs(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def download_checkpoint(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MLInstanceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'setup': grpc.unary_unary_rpc_method_handler(
                    servicer.setup,
                    request_deserializer=django__test_dot_proto_dot_ml__instance__pb2.MLInstanceSetup.FromString,
                    response_serializer=django__test_dot_proto_dot_ml__instance__pb2.MLInstanceResponse.SerializeToString,
            ),
            'import_data': grpc.unary_unary_rpc_method_handler(
                    servicer.import_data,
                    request_deserializer=django__test_dot_proto_dot_ml__instance__pb2.MLImport.FromString,
                    response_serializer=django__test_dot_proto_dot_ml__instance__pb2.MLImportResponse.SerializeToString,
            ),
            'predict': grpc.unary_unary_rpc_method_handler(
                    servicer.predict,
                    request_deserializer=django__test_dot_proto_dot_ml__instance__pb2.MLInstanceAction.FromString,
                    response_serializer=django__test_dot_proto_dot_ml__instance__pb2.MLInstanceResponse.SerializeToString,
            ),
            'export': grpc.unary_unary_rpc_method_handler(
                    servicer.export,
                    request_deserializer=django__test_dot_proto_dot_ml__instance__pb2.MLInstanceAction.FromString,
                    response_serializer=django__test_dot_proto_dot_ml__instance__pb2.MLInstanceResponse.SerializeToString,
            ),
            'create_dataset': grpc.unary_unary_rpc_method_handler(
                    servicer.create_dataset,
                    request_deserializer=django__test_dot_proto_dot_ml__instance__pb2.MLInstanceAction.FromString,
                    response_serializer=django__test_dot_proto_dot_ml__instance__pb2.MLInstanceResponse.SerializeToString,
            ),
            'logs': grpc.unary_unary_rpc_method_handler(
                    servicer.logs,
                    request_deserializer=django__test_dot_proto_dot_ml__instance__pb2.MLInstanceAction.FromString,
                    response_serializer=django__test_dot_proto_dot_ml__instance__pb2.MLInstanceResponse.SerializeToString,
            ),
            'download_checkpoint': grpc.unary_unary_rpc_method_handler(
                    servicer.download_checkpoint,
                    request_deserializer=django__test_dot_proto_dot_ml__instance__pb2.MLInstanceAction.FromString,
                    response_serializer=django__test_dot_proto_dot_ml__instance__pb2.MLInstanceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ml_instance.MLInstance', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MLInstance(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def setup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ml_instance.MLInstance/setup',
            django__test_dot_proto_dot_ml__instance__pb2.MLInstanceSetup.SerializeToString,
            django__test_dot_proto_dot_ml__instance__pb2.MLInstanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def import_data(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ml_instance.MLInstance/import_data',
            django__test_dot_proto_dot_ml__instance__pb2.MLImport.SerializeToString,
            django__test_dot_proto_dot_ml__instance__pb2.MLImportResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def predict(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ml_instance.MLInstance/predict',
            django__test_dot_proto_dot_ml__instance__pb2.MLInstanceAction.SerializeToString,
            django__test_dot_proto_dot_ml__instance__pb2.MLInstanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def export(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ml_instance.MLInstance/export',
            django__test_dot_proto_dot_ml__instance__pb2.MLInstanceAction.SerializeToString,
            django__test_dot_proto_dot_ml__instance__pb2.MLInstanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def create_dataset(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ml_instance.MLInstance/create_dataset',
            django__test_dot_proto_dot_ml__instance__pb2.MLInstanceAction.SerializeToString,
            django__test_dot_proto_dot_ml__instance__pb2.MLInstanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def logs(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ml_instance.MLInstance/logs',
            django__test_dot_proto_dot_ml__instance__pb2.MLInstanceAction.SerializeToString,
            django__test_dot_proto_dot_ml__instance__pb2.MLInstanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def download_checkpoint(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ml_instance.MLInstance/download_checkpoint',
            django__test_dot_proto_dot_ml__instance__pb2.MLInstanceAction.SerializeToString,
            django__test_dot_proto_dot_ml__instance__pb2.MLInstanceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
